load("~/NetBeansProjects/1JCH/Data/Experimental_NWChem_DataSet/1JCH DataSet/SP3/SP3_data.RData")
edaplot(sp3$Experimental_1JCH,H.freq=FALSE)
library(StatDA)
library(chemometrics)
library(car)
library(MASS)
library(gvlma)
edaplot(sp3$Avg_NWChemPrediction,H.freq=FALSE)
edaplot(sp3$Experimental_1JCH,H.freq=FALSE)
edaplot(sp3$Avg_NWChemPrediction,H.freq=FALSE)
edaplot(sp3$Experimental_1JCH,H.freq=FALSE)
load("~/NetBeansProjects/1JCH/Data/Experimental_NWChem_DataSet/1JCH DataSet/SP2/SP2_DATA.RData")
edaplot(sp2$Experimental_1JCH,H.freq=FALSE)
load("~/NetBeansProjects/1JCH/Data/WorkingDirectory/MVLR/SP3/strained/.RData")
strained.complete <- subset( completeData, select = -c(1, 2, 3, 4,5,6,8,10,11,13, 17,18 ,20))
summary(strained.complete)
head(strained.complete)
# center and scale data
# auto scaling
strained.complete <- scale(strained.complete,center = TRUE, scale = TRUE)
summary(strained.complete)
# Variability in the data
# MAD (if MAD == 0, remove the columns)
strained.complete.mad = apply(strained.complete, 2, function(x) {
mad(x, center = median(x), constant = 1.4826,na.rm = FALSE, low = FALSE, high = FALSE)
})
strained.complete.mad
summary(strained.complete)
summary(completeData)
exp1JCH<-completeData[,c(17,18,20)]
strained.complete<-cbind(strained.complete,exp1JCH)
summary(strained.complete)
strained.complete.shuffled <- strained.complete[sample(nrow(strained.complete)),]
strained.complete.testSet<- strained.complete.shuffled[1:67,]
exp1JCH<-completeData[,c(17,18,20)]
strained.complete<-cbind(strained.complete,exp1JCH)
summary(strained.complete)
strained.complete.shuffled <- strained.complete[sample(nrow(strained.complete)),]
strained.complete.testSet<- strained.complete.shuffled[1:67,]
strained.complete.trainSet<- strained.complete.shuffled[68:94,]
pca<-princomp(strained.complete.trainSet[,-c(12,13,14)],scores=TRUE, cor=TRUE)
plot(pca)
summary(pca)
biplot(pca)
pca$scores[,1:6]
PCA_expValues <- cbind(pca$scores[,1:6], strained.complete.trainSet[,c(12,13,14)])
train.frame <- data.frame(PCA_expValues)
summary(train.frame)
train_woo.frame <- train.frame
library(DAAG)
library(boot)
model.boot <- glm(formula = NWChem ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6, train_woo.frame, family = gaussian)
summary(model.boot)
plot(model.boot)
model.boot
val.loocv <- cv.glm(data = train_woo.frame, glmfit = model.boot,K = nrow(train_woo.frame))
val.loocv
k_cv<- vector()
for (j in 2:10){
ka=0
for (k in 1:100){
ka = ka + cv.glm(data = train_woo.frame, glmfit = model.boot, K = j)$delta[1]
}
k_cv[j]=ka/100
}
k_cv
scaled_testSet<-scale(strained.complete.testSet[,-c(12,13,14)],center = TRUE, scale = TRUE)
pc_new <- as.data.frame(predict(pca,newdata=scaled_testSet))
new.fit <- predict(model.boot, pc_new)
rmse <- function(error)
{
sqrt(mean(error^2))
}
mae <- function(error)
{
mean(abs(error))
}
strained.complete.testSet[,12]-new.fit
mae(strained.complete.testSet[,12]-new.fit)
rmse(strained.complete.testSet[,12]-new.fit)
setwd("~/NetBeansProjects/1JCH/Data/Experimental_NWChem_DataSet/1JCH DataSet/SP3")
library(StatDA)
library(chemometrics)
library(car)
library(MASS)
library(gvlma)
# Read the data from file in to a data frame
sp3 = read.csv("SP3_SLR.csv",header=TRUE)
summary(sp3)
head(sp3)
hist(sp3$Experimental_1JCH)
edaplot(sp3$Experimental_1JCH,H.freq=FALSE)
edaplot(sp3$Avg_NWChemPrediction,H.freq=FALSE)
# Simple linear model
lm.fit = lm(sp3$Experimental_1JCH ~ sp3$Avg_NWChemPrediction,sp3)
summary(lm.fit)
plot(lm.fit) #  Residuals vs fitted plots / Normal Q-Q plot / Residuals vs Leverage plot
plot(sp3$Avg_NWChemPrediction,sp3$Experimental_1JCH)
plot(sp3$Avg_NWChemPrediction,sp3$Experimental_1JCH)
abline(lm.fit,col="red",lwd=2)
lm.resi<- resid(lm.fit)
lm.stdres<-rstandard(lm.fit)
plot(sp3$Experimental_1JCH,lm.resi)
skewness(lm.resi)
qqnorm(lm.resi)
qqline(lm.resi)
hist(lm.resi)
shapiro.test(lm.resi)
# Detect outliers in the dataset and their removal
coeffArray<- vector()
for(i in 1:length(sp3$Mol_ID)){
coeffArray[i] = lm(sp3$Experimental_1JCH[-i]~ sp3$Avg_NWChemPrediction[-i])$coeff[2]
}
plot(coeffArray - (lm.fit)$coeff[2])
text(coeffArray - (lm.fit)$coeff[2], labels = (1:140), pos = 4,cex=0.7)
sp3_new<-sp3[-c(1,2,3,4,5,6,7),]
lm1.fit = lm(sp3_new$Experimental_1JCH~ sp3_new$Avg_NWChemPrediction)
summary(lm1.fit)
plot(lm1.fit) #  Residuals vs fitted plots / Normal Q-Q plot / Residuals vs Leverage plot
summary(lm1.fit)
plot(lm1.fit) #  Residuals vs fitted plots / Normal Q-Q plot / Residuals vs Leverage plot
lm1.stdres<-rstandard(lm1.fit)
plot(sp3_new$Experimental_1JCH,lm1.stdres)
skewness(lm1.resi)
qqnorm(lm1.resi)
lm1.resi<- resid(lm1.fit)
lm1.stdres<-rstandard(lm1.fit)
plot(sp3_new$Experimental_1JCH,lm1.stdres)
skewness(lm1.resi)
qqnorm(lm1.resi)
qqline(lm1.resi)
hist(lm1.resi)
shapiro.test(lm1.resi)
library(DAAG)
val.daag<-CVlm(df=sp3_new,m=5,form.lm=formula(Experimental_1JCH ~ Avg_NWChemPrediction))
library(boot)
model.boot <- glm(Experimental_1JCH  ~ Avg_NWChemPrediction,sp3_new,family = gaussian)
summary(model.boot)
val.10.fold <- cv.glm(data = sp3_new, glmfit = model.boot, K = 10)
warnings()
val.10.fold
# Leave one out cross validation (default).
val.loocv <- cv.glm(data = sp3_new, glmfit = model.boot, K = nrow(sp3_new))
val.loocv
k_cv<- vector()
for (j in 2:10){
ka=0
for (k in 1:100){
ka = ka + cv.glm(data = sp3_new, glmfit = model.boot, K = j)$delta[1]
}
k_cv[j]=ka/100
}
k_cv
k_cv
