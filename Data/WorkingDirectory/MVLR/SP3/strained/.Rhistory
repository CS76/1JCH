load("~/NetBeansProjects/1JCH/Data/Experimental_NWChem_DataSet/1JCH DataSet/SP3/SP3_data.RData")
edaplot(sp3$Experimental_1JCH,H.freq=FALSE)
library(StatDA)
library(chemometrics)
library(car)
library(MASS)
library(gvlma)
edaplot(sp3$Avg_NWChemPrediction,H.freq=FALSE)
edaplot(sp3$Experimental_1JCH,H.freq=FALSE)
edaplot(sp3$Avg_NWChemPrediction,H.freq=FALSE)
edaplot(sp3$Experimental_1JCH,H.freq=FALSE)
load("~/NetBeansProjects/1JCH/Data/Experimental_NWChem_DataSet/1JCH DataSet/SP2/SP2_DATA.RData")
edaplot(sp2$Experimental_1JCH,H.freq=FALSE)
load("~/NetBeansProjects/1JCH/Data/WorkingDirectory/MVLR/SP3/strained/.RData")
strained.complete <- subset( completeData, select = -c(1, 2, 3, 4,5,6,8,10,11,13, 17,18 ,20))
summary(strained.complete)
head(strained.complete)
# center and scale data
# auto scaling
strained.complete <- scale(strained.complete,center = TRUE, scale = TRUE)
summary(strained.complete)
# Variability in the data
# MAD (if MAD == 0, remove the columns)
strained.complete.mad = apply(strained.complete, 2, function(x) {
mad(x, center = median(x), constant = 1.4826,na.rm = FALSE, low = FALSE, high = FALSE)
})
strained.complete.mad
summary(strained.complete)
summary(completeData)
exp1JCH<-completeData[,c(17,18,20)]
strained.complete<-cbind(strained.complete,exp1JCH)
summary(strained.complete)
strained.complete.shuffled <- strained.complete[sample(nrow(strained.complete)),]
strained.complete.testSet<- strained.complete.shuffled[1:67,]
exp1JCH<-completeData[,c(17,18,20)]
strained.complete<-cbind(strained.complete,exp1JCH)
summary(strained.complete)
strained.complete.shuffled <- strained.complete[sample(nrow(strained.complete)),]
strained.complete.testSet<- strained.complete.shuffled[1:67,]
strained.complete.trainSet<- strained.complete.shuffled[68:94,]
pca<-princomp(strained.complete.trainSet[,-c(12,13,14)],scores=TRUE, cor=TRUE)
plot(pca)
summary(pca)
biplot(pca)
pca$scores[,1:6]
PCA_expValues <- cbind(pca$scores[,1:6], strained.complete.trainSet[,c(12,13,14)])
train.frame <- data.frame(PCA_expValues)
summary(train.frame)
train_woo.frame <- train.frame
library(DAAG)
library(boot)
model.boot <- glm(formula = NWChem ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6, train_woo.frame, family = gaussian)
summary(model.boot)
plot(model.boot)
model.boot
val.loocv <- cv.glm(data = train_woo.frame, glmfit = model.boot,K = nrow(train_woo.frame))
val.loocv
k_cv<- vector()
for (j in 2:10){
ka=0
for (k in 1:100){
ka = ka + cv.glm(data = train_woo.frame, glmfit = model.boot, K = j)$delta[1]
}
k_cv[j]=ka/100
}
k_cv
scaled_testSet<-scale(strained.complete.testSet[,-c(12,13,14)],center = TRUE, scale = TRUE)
pc_new <- as.data.frame(predict(pca,newdata=scaled_testSet))
new.fit <- predict(model.boot, pc_new)
rmse <- function(error)
{
sqrt(mean(error^2))
}
mae <- function(error)
{
mean(abs(error))
}
strained.complete.testSet[,12]-new.fit
mae(strained.complete.testSet[,12]-new.fit)
rmse(strained.complete.testSet[,12]-new.fit)
setwd("~/NetBeansProjects/1JCH/Data/WorkingDirectory/MVLR/SP3/strained")
library(StatDA)
library(chemometrics)
library(car)
library(MASS)
library(gvlma)
library(robustbase)
# import data
completeData = read.csv("strained.csv",header=TRUE)
summary(completeData)
# strained.complete = strained.complete[-c(1,2),]
# select subset of data (remove unwanted columns)
strained.complete <- subset( completeData, select = -c(1, 2, 3, 4,5,6,8,10,11,13, 17,18 ,20))
summary(strained.complete)
head(strained.complete)
# center and scale data
# auto scaling
strained.complete <- scale(strained.complete,center = TRUE, scale = TRUE)
summary(strained.complete)
# Variability in the data
# MAD (if MAD == 0, remove the columns)
strained.complete.mad = apply(strained.complete, 2, function(x) {
mad(x, center = median(x), constant = 1.4826,na.rm = FALSE, low = FALSE, high = FALSE)
})
strained.complete.mad
summary(strained.complete)
summary(completeData)
exp1JCH<-completeData[,c(17,18,20)]
strained.complete<-cbind(strained.complete,exp1JCH)
summary(strained.complete)
strained.complete.shuffled <- strained.complete[sample(nrow(strained.complete)),]
strained.complete.testSet<- strained.complete.shuffled[1:67,]
strained.complete.trainSet<- strained.complete.shuffled[1:67,]
strained.complete.testSet<- strained.complete.shuffled[68:94,]
summary(strained.complete.trainSet)
pca<-princomp(strained.complete.trainSet[,-c(12,13,14)],scores=TRUE, cor=TRUE)
plot(pca)
summary(pca)
biplot(pca)
View(strained.complete.trainSet)
pca<-princomp(strained.complete.trainSet[-c(40,44),-c(12,13,14)],scores=TRUE, cor=TRUE)
plot(pca)
summary(pca)
biplot(pca)
pca$scores[,1:6]
PCA_expValues <- cbind(pca$scores[,1:6], strained.complete.trainSet[-c(40,44),c(12,13,14)])
train.frame <- data.frame(PCA_expValues)
summary(train.frame)
train_woo.frame <- train.frame
library(DAAG)
library(boot)
model.boot <- glm(formula = NWChem ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6, train_woo.frame, family = gaussian)
summary(model.boot)
plot(model.boot)
val.loocv <- cv.glm(data = train_woo.frame, glmfit = model.boot,K = nrow(train_woo.frame))
val.loocv
View(train.frame)
train_woo.frame <- train.frame[-c(43,13,23),]
model.boot <- glm(formula = NWChem ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6, train_woo.frame, family = gaussian)
summary(model.boot)
plot(model.boot)
model.boot
val.loocv <- cv.glm(data = train_woo.frame, glmfit = model.boot,K = nrow(train_woo.frame))
val.loocv
train_woo.frame <- train.frame[-c(8,51,43,13,23),]
model.boot <- glm(formula = NWChem ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6, train_woo.frame, family = gaussian)
summary(model.boot)
plot(model.boot)
model.boot
val.loocv <- cv.glm(data = train_woo.frame, glmfit = model.boot,K = nrow(train_woo.frame))
val.loocv
k_cv<- vector()
for (j in 2:10){
ka=0
for (k in 1:100){
ka = ka + cv.glm(data = train_woo.frame, glmfit = model.boot, K = j)$delta[1]
}
k_cv[j]=ka/100
}
k_cv
scaled_testSet<-scale(strained.complete.testSet[,-c(12,13,14)],center = TRUE, scale = TRUE)
pc_new <- as.data.frame(predict(pca,newdata=scaled_testSet))
new.fit <- predict(model.boot, pc_new)
rmse <- function(error)
{
sqrt(mean(error^2))
}
mae <- function(error)
{
mean(abs(error))
}
strained.complete.testSet[,12]-new.fit
mae(strained.complete.testSet[,12]-new.fit)
rmse(strained.complete.testSet[,12]-new.fit)
plot(strained.complete.testSet[,12],new.fit)
hist(model.boot$resid)
skewness(model.boot$resid)
shapiro.test(model.boot$resid)
View(strained.complete.trainSet)
# import libraries
library(StatDA)
completeData = read.csv("strained.csv",header=TRUE)
summary(completeData)
strained.complete <- subset( completeData, select = -c(1, 2, 3, 4,5,6,8,10,11,13, 17,18 ,20))
summary(strained.complete)
head(strained.complete)
strained.complete <- scale(strained.complete,center = TRUE, scale = TRUE)
summary(strained.complete)
strained.complete.mad = apply(strained.complete, 2, function(x) {
mad(x, center = median(x), constant = 1.4826,na.rm = FALSE, low = FALSE, high = FALSE)
})
strained.complete.mad
summary(strained.complete)
summary(completeData)
exp1JCH<-completeData[,c(17,18,20)]
strained.complete<-cbind(strained.complete,exp1JCH)
summary(strained.complete)
strained.complete.shuffled <- strained.complete[sample(nrow(strained.complete)),]
strained.complete.trainSet<- strained.complete.shuffled[1:67,]
strained.complete.testSet<- strained.complete.shuffled[68:94,]
summary(strained.complete.trainSet)
pca<-princomp(strained.complete.trainSet[,-c(12,13,14)],scores=TRUE, cor=TRUE)
plot(pca)
summary(pca)
biplot(pca)
View(strained.complete.trainSet)
pca<-princomp(strained.complete.trainSet[-c(4,45),-c(12,13,14)],scores=TRUE, cor=TRUE)
summary(pca)
biplot(pca)
pca<-princomp(strained.complete.trainSet[-c(4,45, 63,42,19),-c(12,13,14)],scores=TRUE, cor=TRUE)
plot(pca)
summary(pca)
biplot(pca)
PCA_expValues <- cbind(pca$scores[,1:6], strained.complete.trainSet[-c(4,45, 63,42,19),c(12,13,14)])
train.frame <- data.frame(PCA_expValues)
summary(train.frame)
train_woo.frame <- train.frame
train_woo.frame <- train.frame[-c(8,51,43,13,23),]
train_woo.frame <- train.frame
model.boot <- glm(formula = NWChem ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6, train_woo.frame, family = gaussian)
summary(model.boot)
plot(model.boot)
model.boot
val.loocv <- cv.glm(data = train_woo.frame, glmfit = model.boot,K = nrow(train_woo.frame))
val.loocv
View(train.frame)
train_woo.frame <- train.frame[-c(28,45,39),]
model.boot <- glm(formula = NWChem ~ Comp.1 + Comp.2 + Comp.3 + Comp.4 + Comp.5 + Comp.6, train_woo.frame, family = gaussian)
summary(model.boot)
plot(model.boot)
model.boot
# The 'cv.glm' function returns a 'delta' which shows (first) the raw cross-validation estimate
# of prediction error and (second) the adjusted cross-validation estimate. The adjustment is
# designed to compensate for the bias introduced by not using leave-one-out cross-validation.
# Leave one out cross validation (default).
val.loocv <- cv.glm(data = train_woo.frame, glmfit = model.boot,K = nrow(train_woo.frame))
val.loocv
k_cv<- vector()
for (j in 2:10){
ka=0
for (k in 1:100){
ka = ka + cv.glm(data = train_woo.frame, glmfit = model.boot, K = j)$delta[1]
}
k_cv[j]=ka/100
}
k_cv
scaled_testSet<-scale(strained.complete.testSet[,-c(12,13,14)],center = TRUE, scale = TRUE)
pc_new <- as.data.frame(predict(pca,newdata=scaled_testSet))
new.fit <- predict(model.boot, pc_new)
rmse <- function(error)
{
sqrt(mean(error^2))
}
mae <- function(error)
{
mean(abs(error))
}
strained.complete.testSet[,12]-new.fit
mae(strained.complete.testSet[,12]-new.fit)
rmse(strained.complete.testSet[,12]-new.fit)
plot(strained.complete.testSet[,12],new.fit)
hist(model.boot$resid)
skewness(model.boot$resid)
shapiro.test(model.boot$resid)
